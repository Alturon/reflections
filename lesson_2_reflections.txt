What happens when you initialize a repository?
Why do you need to do it?

	Only after initializing a directory that a
	directory can be considered a git repository.
	git init creates the necessary file (.git) so
	that git recognizes it as a repository and
	all then all the git functions would be
	available. Now it would possible using git
	to keep track of versions of files in that
	directory.

How can you use the staging area to make sure you
have one commit per logical change?

	By comparing the staging area to the latest
	commit, using git diff --staged, differences
	can be found; if they are significant enough
	to be considered as logically different, then
	we can make a commit.
	
What are some situations when branches would be
helpful in keeping your history organized?
How would branches help?

	Branches would be helpful when :
		- experimenting with new ideas,
		- fixing bugs,
		- or just when not sure a new idea should
		  be incorporated into the master branch;
		  that could be due to many reasons.
		  For example, we were just shown how
		  easy-mode and coins branches were
		  created so as to keep these two new
		  ideas separate from the main concept.

How do the diagrams help you visualize the branch
structure?

	Each commit points to its parent commit,
	until the earliest commit in the repository
	history. Easy said, but having a visual of
	the whole set-up helps in quickly deciphering
	the	whole structure. Explaining branches is
	way easier this way.